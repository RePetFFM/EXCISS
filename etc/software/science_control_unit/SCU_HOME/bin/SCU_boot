#!/bin/bash
###############################################################################
#
# SCU_boot
#
# Prepares and starts the SCU environment at system boot time.
#   1. Sets RTC of SCU to date read from MCU (RTC_date)
#   2. Start IO shutdown daemon (PI_shutdown_IO)
#   3. Perform software updates (SCU_update)
#   4. Launch SCU main mission (SCU_launch_mission)
# Executed from /etc/rc.local with (for SCU_HOME="/opt/MLU/SCU"):
#   ### -----------------------------------------------------------------
#   ### EXCISS MLU SCU modifications start ------------------------------
#   ### -----------------------------------------------------------------
#   /opt/MLU/SCU/bin/SCU_boot
#   ### EXCISS MLU SCU modifications end   ------------------------------
#
# Needs sudo (root) for kill - see ${CMD_PREFIX_SUDO}
#
# $LOCATION ${SCU_HOME}/bin
#
# $REQUIRES LIBRARY ${SCU_HOME}/lib/lib_SCU_base
# $REQUIRES FILE ${SCU_HOME}/etc/SCU_env
# $REQUIRES FILE ${SCU_HOME}/bin/RTC_date
# $REQUIRES FILE ${SCU_HOME}/bin/SCU_update
# $REQUIRES FILE ${SCU_HOME}/bin/PI_shutdown_IO
# $REQUIRES FILE ${SCU_HOME}/bin/SCU_launch_mission
#
# $RETURNS 0 success
# $RETURNS 1 general error
# $RETURNS 2 invalid option or argument
# $RETURNS 3 failed to load environment
# $RETURNS 4 error performing requested task
#
# $COMPONENT_NAME MLU.SCU.SCU_boot
# $VERSION_NUMBER 0.5.1
# $VERSION_DATE 2018-07-17_09:05:00
#
###############################################################################
# set -x
unalias -a

#------------------------------------------------------------------------------
# Define global environment variables
#------------------------------------------------------------------------------

MY_START_TIME="$(date +%Y-%m-%d_%H:%M:%S)" # current time early after start
MY_DIR_NAME="$(dirname $0)" # directory where this script is located
MY_FILE_NAME="$(basename $0)" # file name of this script (without path)
MY_BASE_NAME="$(basename ${MY_FILE_NAME} .sh)" # script name without ".sh"
MY_EXEC_USER="$(whoami 2>/dev/null)" # name of user who started this script
MY_PROCESS_ID="$(ps -fp $$ -o pid= | awk '{print $1}')" # PID of this script
MY_PARENT_ID="$(ps -fp $$ -o ppid= | awk '{print $1}')" # PID of parent process
MY_ARG_COUNT="$#" # number of parameters passed to this script
MY_ARG_LIST="$@" # list of all parameters passed to this script
WORK_DIR_NAME="$(pwd)" # current work directory of shell starting this script
typeset -i RETURN_CODE=0 # return code of previous command (0=success)
typeset -i MY_EXIT_RC=1 # return code of this script (0=success)(default=1)
typeset -i OPT_EXCLUSIVE_COUNT=0 # counter for mutually exclusive options
typeset -i OPT_REQUIRED_COUNT=0 # counter for required options

F_LIB_SCU_BASE_NAME="lib_SCU_base" # library lib_SCU_base
F_LIB_SCU_BASE_REL="lib/${F_LIB_SCU_BASE_NAME}" # relative dir
F_ETC_SCU_ENV_FILE_NAME="SCU_env" # SCU environment file
F_ETC_SCU_ENV_FILE_REL="etc/${F_ETC_SCU_ENV_FILE_NAME}" # relative dir
F_BIN_PI_SHUTDOWN_IO_NAME="PI_shutdown_IO" # binary PI_shutdown_IO
F_BIN_PI_SHUTDOWN_IO_REL="bin/${F_BIN_PI_SHUTDOWN_IO_NAME}" # relative dir
F_BIN_RTC_DATE_NAME="RTC_date" # binary RTC_date
F_BIN_RTC_DATE_REL="bin/${F_BIN_RTC_DATE_NAME}" # relative dir
F_BIN_SCU_UPDATE_NAME="SCU_update" # binary SCU_update
F_BIN_SCU_UPDATE_REL="bin/${F_BIN_SCU_UPDATE_NAME}" # relative dir
F_BIN_SCU_LAUNCH_MISSION_NAME="SCU_launch_mission" # binary SCU_launch_mission
F_BIN_SCU_LAUNCH_MISSION_REL="bin/${F_BIN_SCU_LAUNCH_MISSION_NAME}" # rel. dir
F_SCU_BOOT_LOG_NAME="${MY_BASE_NAME}.log" # SCU_boot log file
F_SCU_BOOT_LOG_REL="log/${F_SCU_BOOT_LOG_NAME}" # relative dir

#------------------------------------------------------------------------------
#
# Function f_Print_Help
#
# Shows the usage of this script.
# Usage: f_Print_Help
# Returns: (none)
#------------------------------------------------------------------------------

function f_Print_Help {

	echo "Usage: ${MY_FILE_NAME} [-v][-V][-h]"
	echo "Starts the SCU environment at system boot time."
	echo "  1. Sets RTC of SCU to date read from MCU (RTC_date)"
	echo "  2. Start IO shutdown daemon (PI_shutdown_IO)"
	echo "  3. Perform software updates (SCU_update)"
	echo "  4. Launch SCU main mission (SCU_launch_mission)"
   echo
	echo "Executed from /etc/rc.local with (for SCU_HOME=\"/opt/MLU/SCU\"):"
	echo "  # -----------------------------------------------------"
	echo "  # EXCISS MLU SCU startup"
	echo "  # -----------------------------------------------------"
	echo "  /opt/MLU/SCU/bin/SCU_boot"
	echo "  # -----------------------------------------------------"
	echo
	echo "  -v     print verbose output"
	echo "  -V     print version of this script"
	echo "  -h     print this help message"
	echo
	echo "Example: ${MY_FILE_NAME}"

}

#------------------------------------------------------------------------------
#
# Function f_Load_SCU_Env
#
# Loads the SCU environment with global variables and functions.
# Usage: f_Load_SCU_Env
# Returns: 0 success
# Returns: 1 variable $SCU_HOME is undefined
# Returns: 2 directory $SCU_HOME is invalid
# Returns: 3 failed to load SCU environment
#------------------------------------------------------------------------------

function f_Load_SCU_Env {

	if [[ -z "${SCU_HOME}" ]]; then

		if "${OPTION_LOWER_V}"; then
			echo "Warning: \${SCU_HOME} not defined in environment!" >&2
		fi

		MY_TMP_SCU_HOME="${MY_DIR_NAME}/.." # SCU_HOME may be (...)/bin/..
		if [[ -f "${MY_TMP_SCU_HOME}/${F_ETC_SCU_ENV_FILE_REL}" ]]; then
			SCU_HOME="${MY_TMP_SCU_HOME}" # will be overwritten from SCU_env
		else
			# Try to find latest (...)/etc/SCU_env file in /
			SCU_HOME=$(find / -type f -name "${F_ETC_SCU_ENV_FILE_NAME}" \
				-printf "%TY%Tm%Td%TH%TM %p\n" 2>/dev/null | sort -rnk 1 | \
				grep "/" | awk '/\/etc\// {print $2}' | head -1)
		fi

		if [[ -z "${SCU_HOME}" ]]; then
			echo "Temporarily setting Variable SCU_HOME=${SCU_HOME}" >&2
		fi

	fi

	if [[ -z "${SCU_HOME}" ]]; then

		echo "ERROR: Variable SCU_HOME can not be found or constructed!" >&2
		return 1

	else

		if [[ ! -e "${SCU_HOME}" ]]; then

			if "${OPTION_LOWER_V}"; then
				echo "ERROR: Directory SCU_HOME=${SCU_HOME} does not exist!" >&2
			fi
			return 2

		elif [[ ! -e "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" ]]; then

			if "${OPTION_LOWER_V}"; then
				echo "ERROR: SCU_HOME=${SCU_HOME} is not a valid SCU" \
					"installation!" >&2
			fi
			return 2

		else

			if "${OPTION_LOWER_V}"; then
				echo "Calling library function:" \
					"${SCU_HOME}/${F_LIB_SCU_BASE_REL} f_SCU_Load_Env" >&2
			fi

			export SCU_HOME # export current SCU_HOME for calls to libraries
			unset SCU_ENV_VERSION_NUMBER SCU_ENV_VERSION_DATE # clear variables
			. "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" f_SCU_Load_Env # source SCU_env

			if [[ -n "${SCU_ENV_VERSION_NUMBER}" && \
					-n "${SCU_ENV_VERSION_DATE}" ]]; then

				if "${OPTION_LOWER_V}"; then
					echo "Successfully loaded SCU environment version:" \
						"${SCU_ENV_VERSION_NUMBER} (${SCU_ENV_VERSION_DATE})" >&2
					echo "Using SCU_HOME=${SCU_HOME}" >&2
					echo >&2
				fi
				return 0

			else

				if "${OPTION_LOWER_V}"; then
					echo "ERROR: Failed to load SCU environment in" \
						"SCU_HOME=${SCU_HOME}!" >&2
				fi
				return 3

			fi

		fi

	fi

}

#------------------------------------------------------------------------------
#
# Function f_SCU_boot_log_Header
#
# Prints the file header for new SCU_boot.log files.
# Usage: f_SCU_boot_log_Header
# Returns: (none)
#------------------------------------------------------------------------------

function f_SCU_boot_log_Header {

	MY_VERSION_NUMBER="$(awk '$1~/^#/ && $2~/^\$VERSION_NUMBER$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"
	MY_VERSION_DATE="$(awk '$1~/^#/ && $2~/^\$VERSION_DATE$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"

	if [[ -z "${MY_VERSION_NUMBER}" ]]; then
		MY_VERSION_NUMBER="0.0.0"
	fi
	if [[ -z "${MY_VERSION_DATE}" ]]; then
		MY_VERSION_DATE="1970-01-01_00:00:00"
	fi

	cat << 'EOF'
###############################################################################
#
# SCU_boot.log
#
# Logs executions of SCU_boot at system start.
#
# $LOCATION ${SCU_HOME}/log
#
# $REQUIRES {none}
#
# $RETURNS {none}
#
# $COMPONENT_NAME MLU.SCU.SCU_boot.log
EOF
echo "# \$VERSION_NUMBER ${MY_VERSION_NUMBER}"
echo "# \$VERSION_DATE ${MY_VERSION_DATE}"
	cat << 'EOF'
#
###############################################################################
EOF

}

#------------------------------------------------------------------------------
# Parse command line parameters
#------------------------------------------------------------------------------

GETOPTS_OPTSTRING=":vVh" # needs to start with ':' for quiet mode

OPTION_LOWER_V=false
OPTION_UPPER_V=false
OPTION_LOWER_H=false

#
# Print help (-h|-?) and version (-V) on priority
# (will not work if given as an argument to an option requiring arguments)
#

OPTIND=1 # start with 1st command line parameter
while getopts "${GETOPTS_OPTSTRING}" CMD_OPTION; do
	case "${CMD_OPTION}" in
		"v")
			OPTION_LOWER_V=true
			;;
		"V")
			OPTION_UPPER_V=true
			;;
		"h")
			OPTION_LOWER_H=true
			;;
		"?")
			if [[ "${OPTARG}" == "?" ]]; then
				OPTION_LOWER_H=true
			fi
			;;
	esac
done

if "${OPTION_LOWER_H}"; then
	f_Print_Help
	exit 0
fi

if "${OPTION_UPPER_V}"; then
	MY_VERSION_NUMBER="$(awk '$1~/^#/ && $2~/^\$VERSION_NUMBER$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"
	MY_VERSION_DATE="$(awk '$1~/^#/ && $2~/^\$VERSION_DATE$/ \
		{print $3; exit}' ${MY_DIR_NAME}/${MY_FILE_NAME} 2>/dev/null)"
	if [[ -n "${MY_VERSION_NUMBER}" && -n "${MY_VERSION_DATE}" ]]; then
		echo "${MY_BASE_NAME} version ${MY_VERSION_NUMBER}" \
			"(${MY_VERSION_DATE})"
		exit 0
	else
		echo "ERROR: Can not find version information" \
			"for ${MY_BASE_NAME}!" >&2
		exit 1
	fi
fi

#
# Parse remaining command line options and arguments
#

OPTIND=1 # start with 1st command line parameter
while getopts "${GETOPTS_OPTSTRING}" CMD_OPTION; do
	case "${CMD_OPTION}" in
		"?")
			echo "ERROR: Invalid option -${OPTARG} specified!" >&2
			echo >&2
			f_Print_Help >&2
			exit 2
			;;
		":")
			echo "ERROR: Option -${OPTARG} requires an argument!" >&2
			echo >&2
			f_Print_Help >&2
			exit 2
			;;
	esac
done

#
# Parse trailing positional parameters
# ($OPTIND, $OPTIND+1, $OPTIND+2, ...)
#

POS_PARAM1="${@:$OPTIND:1}"
if [[ -n "${POS_PARAM1}" ]]; then
	# no positional parameter at all is expected
	echo "ERROR: Parameter ${POS_PARAM1} not expected!" >&2
	echo >&2
	f_Print_Help >&2
	exit 2
fi

#------------------------------------------------------------------------------
# Load SCU environment with global variables (e.g. DEBUG_LEVEL)
#------------------------------------------------------------------------------

f_Load_SCU_Env
RETURN_CODE=$?
if [[ ${RETURN_CODE} -gt 0 ]]; then
	echo "ERROR: Failed to initialize the SCU runtime environment!" >&2
	exit 3
fi

#
# Adjust DEBUG_LEVEL (set in SCU_env) if verbose option was specified
#

if "${OPTION_LOWER_V}"; then
	DEBUG_LEVEL=${DEBUG_LEVEL_DETAIL}
fi

#
# Print details of this process
#

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	. "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" f_SCU_Process_Info >&2 # source into
	echo >&2
fi

#------------------------------------------------------------------------------
# Initialize SCU_boot.log
#------------------------------------------------------------------------------

LOG_FILE="${SCU_HOME}/${F_SCU_BOOT_LOG_REL}"

if [[ -f "${LOG_FILE}" ]]; then
	cp -p "${LOG_FILE}" \
		"${LOG_FILE}.OLD" 2>/dev/null
else
	f_SCU_boot_log_Header > "${LOG_FILE}"
fi

echo >> "${LOG_FILE}"
echo "# ------------------------------" >> "${LOG_FILE}"
echo "# SCU Boot ${MY_START_TIME}" >> "${LOG_FILE}"
echo "# ------------------------------" >> "${LOG_FILE}"

. "${SCU_HOME}/${F_LIB_SCU_BASE_REL}" f_SCU_Process_Info >> "${LOG_FILE}"

if [[ ${DEBUG_LEVEL} -ge ${DEBUG_LEVEL_INFO} ]]; then
	echo "Log file: ${LOG_FILE}"
	echo
fi

#------------------------------------------------------------------------------
# Perform main program
#------------------------------------------------------------------------------

if [[ "$(whoami)" != "root" ]]; then
	echo >> "${LOG_FILE}"
	echo "Warning: Not started by root, using sudo" | tee -a "${LOG_FILE}" >&2
	CMD_PREFIX_SUDO="sudo "
else
	CMD_PREFIX_SUDO=""
fi

#
# Set date of SCU to date read from MCU (RTC_date)
#

echo >> "${LOG_FILE}"
echo "${MY_FILE_NAME}: Setting clock from MCU with ${F_BIN_SCU_UPDATE_NAME}"
echo "#" >> "${LOG_FILE}"
echo "# ${MY_FILE_NAME}: Setting clock from MCU with" \
		"${F_BIN_SCU_UPDATE_NAME}" >> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_BIN_RTC_DATE_REL} -u"
echo "Executing command: ${EXEC_CMD}" >>"${LOG_FILE}"
"${EXEC_CMD}" >> "${LOG_FILE}" 2>&1 &
sleep 2

#
# Start IO shutdown daemon (PI_shutdown_IO)
#

echo >> "${LOG_FILE}"
echo "${MY_FILE_NAME}: Starting ${F_BIN_PI_SHUTDOWN_IO_NAME}"
echo "#" >> "${LOG_FILE}"
echo "# ${MY_FILE_NAME}: Starting ${F_BIN_PI_SHUTDOWN_IO_REL}" \
	>> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"

ps -eaf | egrep -v "ps -eaf|egrep|awk" | \
	awk -v CMD="${F_BIN_PI_SHUTDOWN_IO_NAME}" '$0~CMD {print $2}' | \
	while read PID; do
		echo "Killing existing PID ${PID}" >> "${LOG_FILE}"
		ps -up ${PID} >> "${LOG_FILE}" 2>&1
		${CMD_PREFIX_SUDO}kill -9 ${PID} >> "${LOG_FILE}" 2>&1
	done

EXEC_CMD="${SCU_HOME}/${F_BIN_PI_SHUTDOWN_IO_REL}"
echo "Executing command: ${EXEC_CMD}" >>"${LOG_FILE}"
"${EXEC_CMD}" >> "${LOG_FILE}" 2>&1 &
sleep 2

ps -eaf | egrep -v "ps -eaf|egrep|awk" | \
	awk -v CMD="${F_BIN_PI_SHUTDOWN_IO_NAME}" '$0~CMD {print $2}' | \
	while read PID; do

		if ps -hp ${PID} 2>/dev/null | grep -v "awk" >/dev/null; then
			echo "Script ${F_BIN_PI_SHUTDOWN_IO_NAME}" \
				"running with PID ${PID}" | \
				tee -a "${LOG_FILE}"
			ps -up ${PID} >> "${LOG_FILE}" 2>&1
		fi
	done

#
# Perform software updates (SCU_update)
#

echo >> "${LOG_FILE}"
echo "${MY_FILE_NAME}: Starting ${F_BIN_SCU_UPDATE_NAME}"
echo "#" >> "${LOG_FILE}"
echo "# ${MY_FILE_NAME}: Starting ${F_BIN_SCU_UPDATE_REL}" \
	>> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_BIN_SCU_UPDATE_REL}"
echo "Executing command: ${EXEC_CMD}" >>"${LOG_FILE}"
"${EXEC_CMD}" >> "${LOG_FILE}" 2>&1 &
sleep 2

#
# Launch SCU main mission (SCU_launch_mission)
#

echo >> "${LOG_FILE}"
echo "${MY_FILE_NAME}: Starting ${F_BIN_SCU_LAUNCH_MISSION_NAME}"
echo "#" >> "${LOG_FILE}"
echo "# ${MY_FILE_NAME}: Starting ${F_BIN_SCU_LAUNCH_MISSION_REL}" \
	>> "${LOG_FILE}"
echo "#" >> "${LOG_FILE}"
echo >> "${LOG_FILE}"

EXEC_CMD="${SCU_HOME}/${F_BIN_SCU_LAUNCH_MISSION_REL}"
echo "Executing command: ${EXEC_CMD}" >>"${LOG_FILE}"
"${EXEC_CMD}" >> "${LOG_FILE}" 2>&1 &
sleep 2

exit 0

###############################################################################
# EOF
###############################################################################

